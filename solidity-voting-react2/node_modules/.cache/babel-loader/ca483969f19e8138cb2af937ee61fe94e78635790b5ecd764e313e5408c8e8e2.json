{"ast":null,"code":"var _jsxFileName = \"G:\\\\Git\\\\Solidity-Voting-dApp\\\\solidity-voting-react2\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { contractAbi, contractAddress } from './Constants/constant';\nimport Login from './Components/Login';\nimport Connected from './Components/Connected';\nimport Finished from './Components/Finished';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [remainingTime, setRemainingTime] = useState('');\n  const [candidates, setCandidates] = useState([]);\n  const [number, setNumber] = useState('');\n  const [CanVote, setCanVote] = useState(true);\n  useEffect(() => {\n    getCandidates();\n    getRemainingTime();\n    getCurrentStatus();\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      }\n    };\n  });\n  async function vote() {\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const tx = await contractInstance.vote(number);\n    await tx.wait();\n    canVote();\n  }\n  async function canVote() {\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const voteStatus = await contractInstance.voters(await signer.getAddress());\n    setCanVote(voteStatus);\n  }\n  async function getCandidates() {\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const candidatesList = await contractInstance.getAllVotesOfCandidates();\n    const formattedCandidates = candidatesList.map((candidate, index) => {\n      return {\n        index: index,\n        name: candidate.name,\n        voteCount: Number(candidate.voteCount)\n      };\n    });\n    setCandidates(formattedCandidates);\n  }\n  async function getCurrentStatus() {\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const status = await contractInstance.getVotingStatus();\n    console.log(status);\n    setVotingStatus(status);\n  }\n  async function getRemainingTime() {\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const time = await contractInstance.getRemainingTime();\n    setRemainingTime(parseInt(time, 16));\n  }\n  function handleAccountsChanged(accounts) {\n    if (accounts.length > 0 && account !== accounts[0]) {\n      setAccount(accounts[0]);\n      canVote();\n    } else {\n      setIsConnected(false);\n      setAccount(null);\n    }\n  }\n  async function connectToMetamask() {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        setProvider(provider);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = await provider.getSigner();\n        const address = await (await signer).getAddress();\n        setAccount(address);\n        console.log(\"Metamask Connected : \" + address);\n        setIsConnected(true);\n        canVote();\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      console.error(\"Metamask is not detected in the browser\");\n    }\n  }\n  async function handleNumberChange(e) {\n    setNumber(e.target.value);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: votingStatus ? isConnected ? /*#__PURE__*/_jsxDEV(Connected, {\n      account: account,\n      candidates: candidates,\n      remainingTime: remainingTime,\n      number: number,\n      handleNumberChange: handleNumberChange,\n      voteFunction: vote,\n      showButton: CanVote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 39\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      connectWallet: connectToMetamask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 10\n    }, this) : /*#__PURE__*/_jsxDEV(Finished, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 59\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"2I7SremHpJC74FmPg1xt3EeMuZ8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","ethers","contractAbi","contractAddress","Login","Connected","Finished","jsxDEV","_jsxDEV","App","_s","provider","setProvider","account","setAccount","isConnected","setIsConnected","votingStatus","setVotingStatus","remainingTime","setRemainingTime","candidates","setCandidates","number","setNumber","CanVote","setCanVote","getCandidates","getRemainingTime","getCurrentStatus","window","ethereum","on","handleAccountsChanged","removeListener","vote","BrowserProvider","send","signer","getSigner","contractInstance","Contract","tx","wait","canVote","voteStatus","voters","getAddress","candidatesList","getAllVotesOfCandidates","formattedCandidates","map","candidate","index","name","voteCount","Number","status","getVotingStatus","console","log","time","parseInt","accounts","length","connectToMetamask","address","err","error","handleNumberChange","e","target","value","className","children","voteFunction","showButton","fileName","_jsxFileName","lineNumber","columnNumber","connectWallet","_c","$RefreshReg$"],"sources":["G:/Git/Solidity-Voting-dApp/solidity-voting-react2/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { contractAbi, contractAddress } from './Constants/constant';\r\nimport Login from './Components/Login';\r\nimport Connected from './Components/Connected';\r\nimport Finished from './Components/Finished';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [provider, setProvider] = useState(null);\r\n  const [account, setAccount] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [votingStatus, setVotingStatus] = useState(true);\r\n  const [remainingTime, setRemainingTime] = useState('');\r\n  const [candidates, setCandidates] = useState([]);\r\n  const [number, setNumber] = useState('');\r\n  const [CanVote, setCanVote] = useState(true);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    getCandidates();\r\n    getRemainingTime();\r\n    getCurrentStatus();\r\n    if (window.ethereum) {\r\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n    }\r\n\r\n    return () => {\r\n      if (window.ethereum) {\r\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged)\r\n      }\r\n    }\r\n  });\r\n\r\n  async function vote() {\r\n    const provider = new ethers.BrowserProvider(window.ethereum);\r\n    await provider.send(\"eth_requestAccounts\", []);\r\n    const signer = await provider.getSigner();\r\n    const contractInstance = new ethers.Contract(\r\n      contractAddress, contractAbi, signer\r\n    );\r\n\r\n    const tx = await contractInstance.vote(number);\r\n    await tx.wait();\r\n    canVote();\r\n  }\r\n\r\n  async function canVote() {\r\n    const provider = new ethers.BrowserProvider(window.ethereum);\r\n    await provider.send(\"eth_requestAccounts\", []);\r\n    const signer = await provider.getSigner();\r\n    const contractInstance = new ethers.Contract(\r\n      contractAddress, contractAbi, signer\r\n    );\r\n    const voteStatus = await contractInstance.voters(await signer.getAddress());\r\n    setCanVote(voteStatus);\r\n  }\r\n\r\n  async function getCandidates() {\r\n    const provider = new ethers.BrowserProvider(window.ethereum);\r\n    await provider.send(\"eth_requestAccounts\", []);\r\n    const signer = await provider.getSigner();\r\n    const contractInstance = new ethers.Contract(\r\n      contractAddress, contractAbi, signer\r\n    );\r\n    const candidatesList = await contractInstance.getAllVotesOfCandidates();\r\n    const formattedCandidates = candidatesList.map((candidate, index) => {\r\n      return {\r\n        index: index,\r\n        name: candidate.name,\r\n        voteCount: Number(candidate.voteCount),\r\n      }\r\n    });\r\n    setCandidates(formattedCandidates);\r\n  }\r\n\r\n  async function getCurrentStatus() {\r\n    const provider = new ethers.BrowserProvider(window.ethereum);\r\n    await provider.send(\"eth_requestAccounts\", []);\r\n    const signer = await provider.getSigner();\r\n    const contractInstance = new ethers.Contract(\r\n      contractAddress, contractAbi, signer\r\n    );\r\n    const status = await contractInstance.getVotingStatus();\r\n    console.log(status);\r\n    setVotingStatus(status);\r\n  }\r\n\r\n  async function getRemainingTime() {\r\n    const provider = new ethers.BrowserProvider(window.ethereum);\r\n    await provider.send(\"eth_requestAccounts\", []);\r\n    const signer = await provider.getSigner();\r\n    const contractInstance = new ethers.Contract(\r\n      contractAddress, contractAbi, signer\r\n    );\r\n    const time = await contractInstance.getRemainingTime();\r\n    setRemainingTime(parseInt(time, 16))\r\n  }\r\n\r\n  function handleAccountsChanged(accounts) {\r\n    if (accounts.length > 0 && account !== accounts[0]) {\r\n      setAccount(accounts[0]);\r\n      canVote();\r\n    } else {\r\n      setIsConnected(false);\r\n      setAccount(null);\r\n    }\r\n  }\r\n\r\n  async function connectToMetamask() {\r\n    if (window.ethereum) {\r\n      try {\r\n        const provider = new ethers.BrowserProvider(window.ethereum);\r\n        setProvider(provider);\r\n        await provider.send(\"eth_requestAccounts\", []);\r\n        const signer = await provider.getSigner();\r\n        const address = await (await signer).getAddress();\r\n        setAccount(address);\r\n        console.log(\"Metamask Connected : \" + address);\r\n        setIsConnected(true);\r\n        canVote();\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    } else {\r\n      console.error(\"Metamask is not detected in the browser\")\r\n    }\r\n  }\r\n\r\n  async function handleNumberChange(e) {\r\n    setNumber(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {votingStatus ? (isConnected ? (<Connected\r\n        account={account}\r\n        candidates={candidates}\r\n        remainingTime={remainingTime}\r\n        number={number}\r\n        handleNumberChange={handleNumberChange}\r\n        voteFunction={vote}\r\n        showButton={CanVote} />)\r\n        :\r\n        (<Login connectWallet={connectToMetamask} />)) : (<Finished />)}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}